library(fpc)

bk <-read.csv("C:/Users/Computer/Desktop/datamining/suicide_rates.csv")
names(bk)[1] = "country"
str(bk)

# Using lapply converting all columns to numeric
bk1 <- lapply(bk,as.numeric)
bk1 <- data.frame(bk1)
str(bk1)
#View(bk1)
#####  1      ################
# Class Attribute - > y

#Which class attribute does your dataset have?  
# Based on the dataset and features, we can that, they have given
# per country per year suicide number, Along with that they have some
# demographic information like Gender, Age group, population of that country for
# that perticular year. Also assuming the finanacial condition is responsible 
# for suicide, they have also provided GDP infomation. Lets use this features to
# predict the suicide rate 

plot(bk1$year,bk1$suicides_no,type='b')

#Lets check the year wise trend of Suicide for all countries

bk2 = bk[bk$country=='Albania',]
#plot(bk2$year,bk2$suicides_no,type='b',ylim=c(0,10000))

#Also check it for one specific country

hist(bk1$suicides_no)

#Lets see the distribution of target column, which is highly skewed, because very few 
# enreies are there with high suicide 

############  2     #############
# 
# List the Minimum, Maximum, Mean, Median, Mode, Q1, Q3, and Standard Deviation for two appropriate attributes.  Which 
# attribute has the smaller standard deviation?
#   


## min,max



PerCountryPopulation = aggregate(suicides_no ~ country,bk, sum)


print(summary(PerCountryPopulation$suicides_no))
print(summary(bk1$gdp_per_capita....))

## mode
print(names(table(bk$age))[table(bk1$age)==max(table(bk1$age))])

print(names(table(bk$generation))[table(bk1$generation)==max(table(bk1$generation))])

## sd

print(sd(bk1$gdp_for_year....))

print(sd(bk1$gdp_per_capita....))

## Plot ##

################################# 3 ##############################
# For each of the attributes above, make a scatterplot and describe in detail how each of the attributes is correlated to 
# the identified class attribute.

plot(bk1$year,bk1$suicides_no,type='b')

PerCountryPopulation = aggregate(suicides_no ~ country, bk, sum)
barplot(PerCountryPopulation$suicides_no,
        main = "Suicides by  Country",
        xlab = "Suicide no",
        ylab = "Country",
        names.arg = PerCountryPopulation$country,
        col = "darkred",
        horiz = TRUE)

AgeWiseySuicide = aggregate(suicides_no ~ age, bk, sum)

barplot(AgeWiseySuicide$suicides_no,
        main = "Suicides by Age group",
        xlab = "Suicides",
        ylab = "Age",
        names.arg = AgeWiseySuicide$age,
        col = "darkred",
        horiz = TRUE)
################################# 4 ##############################

## Splitting Dataset ##

# Separate the dataset into 25% training data and 75% test data.  Remove the class attribute values from the test data 
# set. Then prepare the training data to run with two of the classifiers below.

#lets drop some columns where they are just concenatation of some columns 
# and some are just blank columns
# alongwith the mean square metrics we have plotted the line charts so that we canc
# check our results are on correct line or not

bk2 = subset(bk1,select = -c(suicides.100k.pop,country.year,HDI.for.year))

bk_preprocess = bk2[1:10000,]

ind <- sample(2, nrow(bk_preprocess), replace=TRUE, prob=c(0.75, 0.25))
trainDataset <- bk_preprocess[ind==1,]
testDataset <- bk_preprocess[ind==2,]


str(trainDataset)

library(mlbench)

library(e1071)
## Linear regresion model ##

lm_bk <- lm(suicides_no ~ ., data=trainDataset)
lm_pred = predict(lm_bk,newdata = testDataset)
plot(lm_bk)


## Random Forest ##
library(randomForest)
rf_bk <- randomForest(suicides_no ~ ., data=trainDataset, ntree=15, proximity=TRUE, importance=TRUE)
rf_pred = predict(rf_bk,newdata = testDataset)


RMSE = function(m, o){
  (mean((m - o)^2))
}

RMSE(lm_pred,testDataset$suicides_no)

## Output ##
#75626.12


importance(rf_bk)
varImpPlot(rf_bk)

Rand_Pred_bk <- predict(rf_bk, newdata=testDataset)

plot(testDataset$suicides_no,type='l')
lines(Rand_Pred_bk,col='red')
## neural network ###

#library(neuralnet)
#nnetModel <- neuralnet(suicides_no ~ ., data = trainDataset,stepmax = 100)
#NNETpred = compute(nnetModel, testDataset)$net.result
#summary(nnetModel)

#plot(nnetModel)


#NN1_Test_SSE <- sum((NNETpred - testDataset$suicides_no)^2)/2



importance(rf_bk)
varImpPlot(rf_bk)

Rand_Pred_bk <- predict(rf_bk, newdata=testDataset)

plot(testDataset$suicides_no,type='l')
lines(Rand_Pred_bk,col='red')
# alongwith the mean square metrics we have plotted the line charts so that we canc
# check our results are on correct line or not


########################## 5 ######################################## 
# 5 Using the test data set you have just generated, remove  the class attribute and run two of the clustering algorithms 
# below. 
## clustering ##
## k means

normalize = function(x){
  return( (x - min(x)) / (max(x) - min(x)) )
}

testDataset_new = normalize(testDataset[,-5])


testDataset_new$y <- NULL

(kmeans.result <- kmeans(testDataset_new,4))

table(kmeans.result$cluster)

plotcluster(testDataset_new, kmeans.result$cluster)

library(cluster)

clusplot(testDataset_new, kmeans.result$cluster, color=TRUE, shade=TRUE, 
         labels=2, lines=0)

## DBSCAN
##



dbscan_data <- dbscan(testDataset[,-5], eps=1.5, MinPts=5)

plotcluster(testDataset[,-5], dbscan_data$cluster)

########################## 6 ######################################## 
# 6 What kinds of business or political decisions could someone make on the basis of your analysis?

# As we have built a regression model which is able to predict the number of suicides per year and per country,
# Using this model we can create some alarm system where we can give early verdict so that 
# we can take some preventive actions so that this type of incidents can be avioded